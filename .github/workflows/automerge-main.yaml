name: Automerge Workflow

on:
  workflow_dispatch:
    inputs:
      srcBranch:
        description: 'Source branch to merge from'
        required: true
        type: string
      tgtBranch:
        description: 'Target branch to merge into'
        required: true
        type: string

jobs:
  automerge:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all branches and tags

      - name: Fetch all branches
        run: |
          git fetch origin '+refs/heads/*:refs/remotes/origin/*'

      - name: Verify Branch Existence
        run: |
          git branch -r
          if ! git show-ref --quiet refs/remotes/origin/${{ github.event.inputs.tgtBranch }}; then
            echo "Target branch '${{ github.event.inputs.tgtBranch }}' does not exist."
            exit 1
          fi
          if ! git show-ref --quiet refs/remotes/origin/${{ github.event.inputs.srcBranch }}; then
            echo "Source branch '${{ github.event.inputs.srcBranch }}' does not exist."
            exit 1
          fi

      - name: Check branch protection
        id: check_protection
        run: |
          protection_status=$(curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/branches/${{ github.event.inputs.tgtBranch }}/protection \
            | jq '.enabled' 2>&1 || echo "404")
          if [ "$protection_status" == "404" ]; then
            echo "Branch not protected"
            echo "protection_status=false" >> $GITHUB_ENV
          else
            echo "protection_status=true" >> $GITHUB_ENV
          fi

      - name: Merge branches if not protected
        if: env.protection_status == 'false'
        run: |
          git checkout ${{ github.event.inputs.tgtBranch }}
          git merge ${{ github.event.inputs.srcBranch }}
          git push

      - name: Get Committers' Emails
        id: get_committers
        run: |
          emails=$(git log --format='%ae' origin/${{ github.event.inputs.srcBranch }} | sort | uniq | tr '\n' ' ')
          echo "COMMITTER_EMAILS=$emails" >> $GITHUB_ENV

      - name: Install sendmail
        run: sudo apt-get install -y sendmail

      - name: Send success email to committers
        if: success() && env.protection_status == 'false'
        run: |
          echo -e "Subject: Automerge Success\n\nThe branches were automerged successfully." | sendmail -v -f "sender@example.com" ${{ env.COMMITTER_EMAILS }}

      - name: Send merge conflict email to committers
        if: failure()
        run: |
          echo -e "Subject: Merge Conflict Detected\n\nThere was a conflict while merging ${{ github.event.inputs.srcBranch }} into ${{ github.event.inputs.tgtBranch }}." | sendmail -v -f "sender@example.com" ${{ env.COMMITTER_EMAILS }}
